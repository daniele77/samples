/*******************************************************************************
 * SIMPLEX - A simplex algorithm implementation.
 * Copyright (C) 2013 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#include <iostream>
#include <valarray>
#include <cassert>

template < typename T >
class Table
{
public:
    Table( size_t rows, size_t cols ) : 
        row_num( rows ),
        col_num( cols ),
        data( rows * cols )
    {}
    T& operator()( size_t row, size_t column )
    {
        assert( row < row_num );
        assert( column < col_num );
        // column major
        return data[ column + row * col_num ];
    }
    size_t Columns() const { return col_num; }
    size_t Rows() const { return row_num; }
private:
    const size_t row_num;
    const size_t col_num;
    typedef std::valarray< T > Data;
    Data data;
};

template < typename T >
class Matrix : public Table< T >
{
public:
    Matrix( size_t rows, size_t cols ) : Table< T >( rows, cols ) {}
};

template < typename T >
class SimplexTableau : public Matrix< T >
{
public:
    SimplexTableau( size_t rows, size_t cols ) : Matrix< T >( rows, cols ) {}
};

int main()
{
    using namespace std;

    Matrix< int > t( 3, 5 );
    t( 1, 2 ) = 12;
    cout << t(1, 2 ) << endl;
    
    return 0;
}
